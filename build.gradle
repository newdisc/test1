plugins {
  id 'java'
  id "com.github.node-gradle.node" version "3.1.1"
  id 'eclipse'
}

wrapper {
    description "Regenerates the Gradle Wrapper files"
    gradleVersion = '5.0'
    distributionUrl = "http://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
    mavenCentral()
}

dependencies {
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation "org.springframework:spring-core:5.3.12"
    implementation 'org.apache.commons:commons-csv:1.9.0'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.32'
    implementation group: 'org.hsqldb', name: 'hsqldb', version: '2.6.1'

    //implementation group: "io.vertx", name: "vertx-stack-depchain", version: "4.2.1"
    implementation group: "io.vertx", name: "vertx-web", version: "4.2.1"
    implementation group: "org.springframework", name: "spring-context", version: "5.3.13"
    implementation group: "org.springframework", name: "spring-jdbc", version: "5.3.13"
    implementation group: "com.fasterxml.jackson.core", name: "jackson-databind", version: "2.13.0"
    
    runtimeOnly group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.6'
    testImplementation("org.junit.jupiter:junit-jupiter:5.8.1")
}

test {
    useJUnitPlatform()
}

tasks.register('uberJar', Jar) {
    archiveClassifier = 'uber'
    manifest {
        attributes 'Main-Class': 'lib.vertx.DefaultVertxServer'
    }
    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { 
        	it.name.endsWith('jar') }
        	.collect { zipTree(it) }
    }
}

node {
    version = '14.17.6'
    npmVersion = '6.14.15'
    download = true
}

npm_run_build {
    // make sure the build task is executed only when appropriate files change
    inputs.files fileTree('public')
    inputs.files fileTree('src')

    // 'node_modules' appeared not reliable for dependency change detection (the task was rerun without changes)
    // though 'package.json' and 'package-lock.json' should be enough anyway
    inputs.file 'package.json'
    inputs.file 'package-lock.json'
    
    //BUILD_PATH='./npmBuild'
    environment = ['BUILD_PATH': 'webroot']

    outputs.dir 'webroot'
}

task webjar(type: Jar) {
	from(fileTree('webroot')) { 
		into 'webroot'
	}
}

clean {
    delete "webroot"
}

/*
*/

tasks.register('customClean') {
    dependsOn 'clean'
    delete "node_modules"
    delete "bin"
    delete ".settings"
    delete ".project"
    delete ".classpath"
    println 'Please Delete .gradle'
}

jar.dependsOn(uberJar)
jar.dependsOn(npm_run_build)
jar.finalizedBy('webjar')
build.dependsOn(jar)

